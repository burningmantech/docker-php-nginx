# Docs:
# https://help.github.com/en/articles/about-github-actions
# https://help.github.com/en/articles/configuring-a-workflow
# https://help.github.com/en/articles/workflow-syntax-for-github-actions


name: CI/CD

on: [push]


jobs:

  info:

    name: Workflow information
    runs-on: ubuntu-16.04
    timeout-minutes: 1

    steps:

      - name: Print GitHub Context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "${GITHUB_CONTEXT}";

      - name: Print Job Context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "${JOB_CONTEXT}";

      - name: Print Steps Context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "${STEPS_CONTEXT}";

      - name: Print Runner Context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "${RUNNER_CONTEXT}";

      - name: Print Strategy Context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "${STRATEGY_CONTEXT}";

      - name: Print Matrix Context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "${MATRIX_CONTEXT}";


  docker:
    name: Build Docker image

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Build Docker image
        run: ./bin/build;

      - name: Save Docker image
        run: |
          mkdir images;
          docker image save $(docker images --format "{{.Repository}}:{{.Tag}}" php-nginx) | gzip -9 > images/images.tgz;

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v1
        with:
          name: images
          path: images


  test-docker:

    name: Test Docker image

    needs: [docker]

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: images

      - name: Load Docker image
        run: gzip --uncompress --stdout images/images.tgz | docker image load;

      - name: Test Docker image
        run: ./bin/test;


  push-dockerhub:
    name: Push image to Docker Hub

    needs: [test-docker]
    if: github.ref == 'refs/heads/master'

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

      - name: Download Docker image artifact
        uses: actions/download-artifact@v1
        with:
          name: images

      - name: Load Docker image
        run: gzip --uncompress --stdout images/images.tgz | docker image load;

      - name: Log into Docker Hub
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: echo "${DOCKER_PASSWORD}" | docker login --username="${DOCKER_USER}" --password-stdin;

      - name: Push image to Docker Hub
        run: |
          for image_name in $(docker images --format "{{.Repository}}:{{.Tag}}" php-nginx); do
            echo "Tagging ${image_name} -> burningman/${image_name}";
            docker tag "${image_name}" "burningman/${image_name}";
            echo "Pushing burningman/${image_name}";
            docker push "burningman/${image_name}";
          done;

      - name: Checkout source code
        uses: actions/checkout@v1

      - name: Update Docker Hub description
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USER }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          token="$(                                                                              \
            curl                                                                                 \
              --silent                                                                           \
              --request POST                                                                     \
              --header "Content-Type: application/json"                                          \
              --data "{\"username\": \"${DOCKER_USER}\", \"password\": \"${DOCKER_PASSWORD}\"}"  \
              "https://hub.docker.com/v2/users/login/"                                           \
            | sed 's|{.*"token": *"\([^"]*\)".*}|\1|'                                            \
          )";
          curl --silent --output /dev/null                                \
            --request PATCH                                               \
            --header "Authorization: JWT ${token}"                        \
            --data-urlencode "full_description@README.md"                 \
            https://hub.docker.com/v2/repositories/burningman/php-nginx/  \
            ;
